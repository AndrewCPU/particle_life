#define pi 3.14159265358979323846
#define TYPE_AMOUNT_SQUARED $TYPE_AMOUNT_SQUARED$
#define PARTICLE_AMOUNT_SQUARED $PARTICLE_AMOUNT_SQUARED$
#define PARTICLE_AMOUNT $PARTICLE_AMOUNT$

__kernel void vec2_distance(__constant float *vectors, __constant float *minDistances,
                            __constant float *maxDistances, __constant float *strengths,
                            __constant int *types, __global float *resultX, __global float *resultY,
                            int num_points, int typeAmount) {

    int i = get_global_id(0);
    if(i >= num_points)
        return;
    int typeI = types[i];
    float2 vector_i = (float2)(vectors[2 * i], vectors[2 * i + 1]);
    float2 ourVect = (float2)(0, 0);
    for(private int j = 0; j<num_points; j++){
        if(j == i) continue;
        float2 vector_j = (float2)(vectors[2 * j], vectors[2 * j + 1]);
        float2 vec = vector_j - vector_i;
        float distance = length(vec);
        int typeJ = types[j];
        int typeIndex = typeI * typeAmount + typeJ;
        float maxDistance = maxDistances[typeIndex];
        if(distance >= maxDistance)
            continue;
        float minDistance = minDistances[typeIndex];
        float maxStrength = strengths[typeIndex];
        float force = 0;
        if(distance < minDistance) {
            force = ((1.0 / distance) - 1.0) * 0.73;
        }
        else{
            force = maxStrength * (sin(((distance - minDistance) / (maxDistance - minDistance)) * pi));
        }
        float2 forceVec = vec * force / distance;
        ourVect += forceVec;
      }
      resultX[i] = ourVect.x;
      resultY[i] = ourVect.y;
  }
